name: 'build-test'
on: # rebuild any PRs and main branch changes
  pull_request:
  push:
    branches:
      - main
      - 'releases/*'

jobs:
  build: # make sure build/ci work properly
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - run: |
          npm install
      - run: |
          npm run all
  test: # make sure the action works on a clean machine without building
    name:
      Test CLI and server installation (CLI ${{ matrix.cli-version }} / server
      ${{ matrix.server-version }} / OS ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        cli-version: [stable, nightly]
        server-version: [stable, nightly, '5.0']
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: ./
        with:
          cli-version: ${{ matrix.cli-version }}
          server-version: ${{ matrix.server-version }}
      - name: Verify installation
        env:
          SERVER_VERSION: ${{ matrix.server-version }}
        run: |
          gel --version
          edgedb --version
          if [ "$SERVER_VERSION" = "5.0" ]; then
            edgedb-server --version
          else
            gel-server --version
            edgedb-server --version
          fi

  testoldcli:
    name: Test compat CLI installation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cli-version: ['5.0']
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: ./
        with:
          cli-version: ${{ matrix.cli-version }}
      - name: Verify installation
        run: |
          edgedb --version

  testproject:
    name:
      Test integration with Gel projects (CLI ${{ matrix.cli-version }} / server
      ${{ matrix.server-version }} / OS ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        cli-version: [stable, nightly]
        server-version: [stable, nightly, '6.0']
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Create gel.toml
        run: |
          echo -e '[instance]\nserver-version = "6.0"' >> gel.toml
      - uses: ./
        with:
          cli-version: ${{ matrix.cli-version }}
          server-version: ${{ matrix.server-version }}
      - name: Verify installation
        run: |
          gel query "SELECT 'Hello from GitHub Actions'"

  testprojectlink:
    name:
      Test integration with Gel projects using remote instances (CLI ${{
      matrix.cli-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cli-version: [stable, nightly]
      fail-fast: false
    services:
      gel:
        image: geldata/gel:6
        env:
          GEL_SERVER_SECURITY: insecure_dev_mode
        ports:
          - 5656:5656
    steps:
      - uses: actions/checkout@v4
      - name: Create gel.toml
        run: |
          echo -e '[instance]\nserver-version = "6.0"' >> gel.toml
      - uses: ./
        with:
          server-dsn: gel://localhost:5656
          cli-version: ${{ matrix.cli-version }}
          server-version: none
      - name: Verify installation
        run: |
          gel query "SELECT 'Hello from GitHub Actions'"

  testwin:
    runs-on: windows-latest
    strategy:
      matrix:
        cli-version: [stable, nightly]
        server-version: [stable, nightly, '5.0']
      fail-fast: false
    steps:
      - uses: Vampire/setup-wsl@f40fb59d850112c9a292b0218bca8271305b9127 # v5.0
        with:
          additional-packages: ca-certificates curl
          wsl-shell-command: >
            bash -c "env SERVER_VERSION=${{ matrix.server-version }} bash
            --noprofile --norc -euo pipefail '{0}'"
      - uses: actions/checkout@v4
      - uses: ./
        with:
          cli-version: ${{ matrix.cli-version }}
          server-version: ${{ matrix.server-version }}
      - name: Verify installation
        shell: wsl-bash {0}
        run: |
          gel --version
          edgedb --version
          if [ "$SERVER_VERSION" = "5.0" ]; then
            edgedb-server --version
          else
            gel-server --version
            edgedb-server --version
          fi

  testwin-oldcli:
    runs-on: windows-latest
    strategy:
      matrix:
        cli-version: ['5.0']
      fail-fast: false
    steps:
      - uses: Vampire/setup-wsl@f40fb59d850112c9a292b0218bca8271305b9127 # v5.0
        with:
          additional-packages: ca-certificates curl
      - uses: actions/checkout@v4
      - uses: ./
        with:
          cli-version: ${{ matrix.cli-version }}
      - name: Verify installation
        shell: wsl-bash {0}
        run: |
          edgedb --version
